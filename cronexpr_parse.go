/*!
 * Copyright 2013 Raymond Hill
 *
 * Project: github.com/gorhill/cronexpr
 * File: cronexpr_parse.go
 * Version: 1.0
 * License: pick the one which suits you best:
 *   GPL v3 see <https://www.gnu.org/licenses/gpl.html>
 *   APL v2 see <http://www.apache.org/licenses/LICENSE-2.0>
 *
 */

package cronexpr

/******************************************************************************/

import (
	"fmt"
	"regexp"
	"sort"
	"strings"
	"sync"
)

/******************************************************************************/

var (
	genericDefaultList = []int{
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
		10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
		20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
		30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
		50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	}
	yearDefaultList = []int{
		1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
		1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
		1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
		2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
		2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
		2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
		2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
		2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
		2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
		2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
		2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
		2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
		2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
		2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
		2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
		2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
		2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139,
		2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149,
		2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159,
		2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
		2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179,
		2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189,
		2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,
		2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209,
		2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219,
		2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229,
		2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239,
		2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249,
		2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259,
		2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269,
		2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279,
		2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289,
		2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299,
		2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309,
		2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319,
		2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329,
		2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339,
		2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349,
		2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359,
		2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369,
		2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379,
		2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389,
		2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399,
		2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409,
		2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419,
		2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429,
		2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439,
		2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449,
		2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459,
		2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469,
		2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479,
		2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489,
		2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499,
		2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509,
		2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519,
		2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529,
		2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539,
		2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549,
		2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559,
		2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569,
		2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579,
		2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589,
		2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599,
		2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,
		2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619,
		2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629,
		2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639,
		2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649,
		2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659,
		2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669,
		2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679,
		2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689,
		2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699,
		2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709,
		2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719,
		2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729,
		2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739,
		2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749,
		2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759,
		2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769,
		2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779,
		2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789,
		2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799,
		2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
		2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819,
		2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829,
		2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839,
		2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849,
		2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859,
		2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869,
		2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879,
		2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889,
		2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899,
		2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909,
		2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919,
		2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929,
		2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939,
		2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949,
		2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959,
		2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969,
		2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979,
		2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989,
		2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999,
	}
)

/******************************************************************************/

var (
	numberTokens = map[string]int{
		"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9,
		"00": 0, "01": 1, "02": 2, "03": 3, "04": 4, "05": 5, "06": 6, "07": 7, "08": 8, "09": 9,
		"10": 10, "11": 11, "12": 12, "13": 13, "14": 14, "15": 15, "16": 16, "17": 17, "18": 18, "19": 19,
		"20": 20, "21": 21, "22": 22, "23": 23, "24": 24, "25": 25, "26": 26, "27": 27, "28": 28, "29": 29,
		"30": 30, "31": 31, "32": 32, "33": 33, "34": 34, "35": 35, "36": 36, "37": 37, "38": 38, "39": 39,
		"40": 40, "41": 41, "42": 42, "43": 43, "44": 44, "45": 45, "46": 46, "47": 47, "48": 48, "49": 49,
		"50": 50, "51": 51, "52": 52, "53": 53, "54": 54, "55": 55, "56": 56, "57": 57, "58": 58, "59": 59,
		"1970": 1970, "1971": 1971, "1972": 1972, "1973": 1973, "1974": 1974, "1975": 1975, "1976": 1976, "1977": 1977, "1978": 1978, "1979": 1979,
		"1980": 1980, "1981": 1981, "1982": 1982, "1983": 1983, "1984": 1984, "1985": 1985, "1986": 1986, "1987": 1987, "1988": 1988, "1989": 1989,
		"1990": 1990, "1991": 1991, "1992": 1992, "1993": 1993, "1994": 1994, "1995": 1995, "1996": 1996, "1997": 1997, "1998": 1998, "1999": 1999,
		"2000": 2000, "2001": 2001, "2002": 2002, "2003": 2003, "2004": 2004, "2005": 2005, "2006": 2006, "2007": 2007, "2008": 2008, "2009": 2009,
		"2010": 2010, "2011": 2011, "2012": 2012, "2013": 2013, "2014": 2014, "2015": 2015, "2016": 2016, "2017": 2017, "2018": 2018, "2019": 2019,
		"2020": 2020, "2021": 2021, "2022": 2022, "2023": 2023, "2024": 2024, "2025": 2025, "2026": 2026, "2027": 2027, "2028": 2028, "2029": 2029,
		"2030": 2030, "2031": 2031, "2032": 2032, "2033": 2033, "2034": 2034, "2035": 2035, "2036": 2036, "2037": 2037, "2038": 2038, "2039": 2039,
		"2040": 2040, "2041": 2041, "2042": 2042, "2043": 2043, "2044": 2044, "2045": 2045, "2046": 2046, "2047": 2047, "2048": 2048, "2049": 2049,
		"2050": 2050, "2051": 2051, "2052": 2052, "2053": 2053, "2054": 2054, "2055": 2055, "2056": 2056, "2057": 2057, "2058": 2058, "2059": 2059,
		"2060": 2060, "2061": 2061, "2062": 2062, "2063": 2063, "2064": 2064, "2065": 2065, "2066": 2066, "2067": 2067, "2068": 2068, "2069": 2069,
		"2070": 2070, "2071": 2071, "2072": 2072, "2073": 2073, "2074": 2074, "2075": 2075, "2076": 2076, "2077": 2077, "2078": 2078, "2079": 2079,
		"2080": 2080, "2081": 2081, "2082": 2082, "2083": 2083, "2084": 2084, "2085": 2085, "2086": 2086, "2087": 2087, "2088": 2088, "2089": 2089,
		"2090": 2090, "2091": 2091, "2092": 2092, "2093": 2093, "2094": 2094, "2095": 2095, "2096": 2096, "2097": 2097, "2098": 2098, "2099": 2099,
		"2100": 2100, "2101": 2101, "2102": 2102, "2103": 2103, "2104": 2104, "2105": 2105, "2106": 2106, "2107": 2107, "2108": 2108, "2109": 2109,
		"2110": 2110, "2111": 2111, "2112": 2112, "2113": 2113, "2114": 2114, "2115": 2115, "2116": 2116, "2117": 2117, "2118": 2118, "2119": 2119,
		"2120": 2120, "2121": 2121, "2122": 2122, "2123": 2123, "2124": 2124, "2125": 2125, "2126": 2126, "2127": 2127, "2128": 2128, "2129": 2129,
		"2130": 2130, "2131": 2131, "2132": 2132, "2133": 2133, "2134": 2134, "2135": 2135, "2136": 2136, "2137": 2137, "2138": 2138, "2139": 2139,
		"2140": 2140, "2141": 2141, "2142": 2142, "2143": 2143, "2144": 2144, "2145": 2145, "2146": 2146, "2147": 2147, "2148": 2148, "2149": 2149,
		"2150": 2150, "2151": 2151, "2152": 2152, "2153": 2153, "2154": 2154, "2155": 2155, "2156": 2156, "2157": 2157, "2158": 2158, "2159": 2159,
		"2160": 2160, "2161": 2161, "2162": 2162, "2163": 2163, "2164": 2164, "2165": 2165, "2166": 2166, "2167": 2167, "2168": 2168, "2169": 2169,
		"2170": 2170, "2171": 2171, "2172": 2172, "2173": 2173, "2174": 2174, "2175": 2175, "2176": 2176, "2177": 2177, "2178": 2178, "2179": 2179,
		"2180": 2180, "2181": 2181, "2182": 2182, "2183": 2183, "2184": 2184, "2185": 2185, "2186": 2186, "2187": 2187, "2188": 2188, "2189": 2189,
		"2190": 2190, "2191": 2191, "2192": 2192, "2193": 2193, "2194": 2194, "2195": 2195, "2196": 2196, "2197": 2197, "2198": 2198, "2199": 2199,
		"2200": 2200, "2201": 2201, "2202": 2202, "2203": 2203, "2204": 2204, "2205": 2205, "2206": 2206, "2207": 2207, "2208": 2208, "2209": 2209,
		"2210": 2210, "2211": 2211, "2212": 2212, "2213": 2213, "2214": 2214, "2215": 2215, "2216": 2216, "2217": 2217, "2218": 2218, "2219": 2219,
		"2220": 2220, "2221": 2221, "2222": 2222, "2223": 2223, "2224": 2224, "2225": 2225, "2226": 2226, "2227": 2227, "2228": 2228, "2229": 2229,
		"2230": 2230, "2231": 2231, "2232": 2232, "2233": 2233, "2234": 2234, "2235": 2235, "2236": 2236, "2237": 2237, "2238": 2238, "2239": 2239,
		"2240": 2240, "2241": 2241, "2242": 2242, "2243": 2243, "2244": 2244, "2245": 2245, "2246": 2246, "2247": 2247, "2248": 2248, "2249": 2249,
		"2250": 2250, "2251": 2251, "2252": 2252, "2253": 2253, "2254": 2254, "2255": 2255, "2256": 2256, "2257": 2257, "2258": 2258, "2259": 2259,
		"2260": 2260, "2261": 2261, "2262": 2262, "2263": 2263, "2264": 2264, "2265": 2265, "2266": 2266, "2267": 2267, "2268": 2268, "2269": 2269,
		"2270": 2270, "2271": 2271, "2272": 2272, "2273": 2273, "2274": 2274, "2275": 2275, "2276": 2276, "2277": 2277, "2278": 2278, "2279": 2279,
		"2280": 2280, "2281": 2281, "2282": 2282, "2283": 2283, "2284": 2284, "2285": 2285, "2286": 2286, "2287": 2287, "2288": 2288, "2289": 2289,
		"2290": 2290, "2291": 2291, "2292": 2292, "2293": 2293, "2294": 2294, "2295": 2295, "2296": 2296, "2297": 2297, "2298": 2298, "2299": 2299,
		"2300": 2300, "2301": 2301, "2302": 2302, "2303": 2303, "2304": 2304, "2305": 2305, "2306": 2306, "2307": 2307, "2308": 2308, "2309": 2309,
		"2310": 2310, "2311": 2311, "2312": 2312, "2313": 2313, "2314": 2314, "2315": 2315, "2316": 2316, "2317": 2317, "2318": 2318, "2319": 2319,
		"2320": 2320, "2321": 2321, "2322": 2322, "2323": 2323, "2324": 2324, "2325": 2325, "2326": 2326, "2327": 2327, "2328": 2328, "2329": 2329,
		"2330": 2330, "2331": 2331, "2332": 2332, "2333": 2333, "2334": 2334, "2335": 2335, "2336": 2336, "2337": 2337, "2338": 2338, "2339": 2339,
		"2340": 2340, "2341": 2341, "2342": 2342, "2343": 2343, "2344": 2344, "2345": 2345, "2346": 2346, "2347": 2347, "2348": 2348, "2349": 2349,
		"2350": 2350, "2351": 2351, "2352": 2352, "2353": 2353, "2354": 2354, "2355": 2355, "2356": 2356, "2357": 2357, "2358": 2358, "2359": 2359,
		"2360": 2360, "2361": 2361, "2362": 2362, "2363": 2363, "2364": 2364, "2365": 2365, "2366": 2366, "2367": 2367, "2368": 2368, "2369": 2369,
		"2370": 2370, "2371": 2371, "2372": 2372, "2373": 2373, "2374": 2374, "2375": 2375, "2376": 2376, "2377": 2377, "2378": 2378, "2379": 2379,
		"2380": 2380, "2381": 2381, "2382": 2382, "2383": 2383, "2384": 2384, "2385": 2385, "2386": 2386, "2387": 2387, "2388": 2388, "2389": 2389,
		"2390": 2390, "2391": 2391, "2392": 2392, "2393": 2393, "2394": 2394, "2395": 2395, "2396": 2396, "2397": 2397, "2398": 2398, "2399": 2399,
		"2400": 2400, "2401": 2401, "2402": 2402, "2403": 2403, "2404": 2404, "2405": 2405, "2406": 2406, "2407": 2407, "2408": 2408, "2409": 2409,
		"2410": 2410, "2411": 2411, "2412": 2412, "2413": 2413, "2414": 2414, "2415": 2415, "2416": 2416, "2417": 2417, "2418": 2418, "2419": 2419,
		"2420": 2420, "2421": 2421, "2422": 2422, "2423": 2423, "2424": 2424, "2425": 2425, "2426": 2426, "2427": 2427, "2428": 2428, "2429": 2429,
		"2430": 2430, "2431": 2431, "2432": 2432, "2433": 2433, "2434": 2434, "2435": 2435, "2436": 2436, "2437": 2437, "2438": 2438, "2439": 2439,
		"2440": 2440, "2441": 2441, "2442": 2442, "2443": 2443, "2444": 2444, "2445": 2445, "2446": 2446, "2447": 2447, "2448": 2448, "2449": 2449,
		"2450": 2450, "2451": 2451, "2452": 2452, "2453": 2453, "2454": 2454, "2455": 2455, "2456": 2456, "2457": 2457, "2458": 2458, "2459": 2459,
		"2460": 2460, "2461": 2461, "2462": 2462, "2463": 2463, "2464": 2464, "2465": 2465, "2466": 2466, "2467": 2467, "2468": 2468, "2469": 2469,
		"2470": 2470, "2471": 2471, "2472": 2472, "2473": 2473, "2474": 2474, "2475": 2475, "2476": 2476, "2477": 2477, "2478": 2478, "2479": 2479,
		"2480": 2480, "2481": 2481, "2482": 2482, "2483": 2483, "2484": 2484, "2485": 2485, "2486": 2486, "2487": 2487, "2488": 2488, "2489": 2489,
		"2490": 2490, "2491": 2491, "2492": 2492, "2493": 2493, "2494": 2494, "2495": 2495, "2496": 2496, "2497": 2497, "2498": 2498, "2499": 2499,
		"2500": 2500, "2501": 2501, "2502": 2502, "2503": 2503, "2504": 2504, "2505": 2505, "2506": 2506, "2507": 2507, "2508": 2508, "2509": 2509,
		"2510": 2510, "2511": 2511, "2512": 2512, "2513": 2513, "2514": 2514, "2515": 2515, "2516": 2516, "2517": 2517, "2518": 2518, "2519": 2519,
		"2520": 2520, "2521": 2521, "2522": 2522, "2523": 2523, "2524": 2524, "2525": 2525, "2526": 2526, "2527": 2527, "2528": 2528, "2529": 2529,
		"2530": 2530, "2531": 2531, "2532": 2532, "2533": 2533, "2534": 2534, "2535": 2535, "2536": 2536, "2537": 2537, "2538": 2538, "2539": 2539,
		"2540": 2540, "2541": 2541, "2542": 2542, "2543": 2543, "2544": 2544, "2545": 2545, "2546": 2546, "2547": 2547, "2548": 2548, "2549": 2549,
		"2550": 2550, "2551": 2551, "2552": 2552, "2553": 2553, "2554": 2554, "2555": 2555, "2556": 2556, "2557": 2557, "2558": 2558, "2559": 2559,
		"2560": 2560, "2561": 2561, "2562": 2562, "2563": 2563, "2564": 2564, "2565": 2565, "2566": 2566, "2567": 2567, "2568": 2568, "2569": 2569,
		"2570": 2570, "2571": 2571, "2572": 2572, "2573": 2573, "2574": 2574, "2575": 2575, "2576": 2576, "2577": 2577, "2578": 2578, "2579": 2579,
		"2580": 2580, "2581": 2581, "2582": 2582, "2583": 2583, "2584": 2584, "2585": 2585, "2586": 2586, "2587": 2587, "2588": 2588, "2589": 2589,
		"2590": 2590, "2591": 2591, "2592": 2592, "2593": 2593, "2594": 2594, "2595": 2595, "2596": 2596, "2597": 2597, "2598": 2598, "2599": 2599,
		"2600": 2600, "2601": 2601, "2602": 2602, "2603": 2603, "2604": 2604, "2605": 2605, "2606": 2606, "2607": 2607, "2608": 2608, "2609": 2609,
		"2610": 2610, "2611": 2611, "2612": 2612, "2613": 2613, "2614": 2614, "2615": 2615, "2616": 2616, "2617": 2617, "2618": 2618, "2619": 2619,
		"2620": 2620, "2621": 2621, "2622": 2622, "2623": 2623, "2624": 2624, "2625": 2625, "2626": 2626, "2627": 2627, "2628": 2628, "2629": 2629,
		"2630": 2630, "2631": 2631, "2632": 2632, "2633": 2633, "2634": 2634, "2635": 2635, "2636": 2636, "2637": 2637, "2638": 2638, "2639": 2639,
		"2640": 2640, "2641": 2641, "2642": 2642, "2643": 2643, "2644": 2644, "2645": 2645, "2646": 2646, "2647": 2647, "2648": 2648, "2649": 2649,
		"2650": 2650, "2651": 2651, "2652": 2652, "2653": 2653, "2654": 2654, "2655": 2655, "2656": 2656, "2657": 2657, "2658": 2658, "2659": 2659,
		"2660": 2660, "2661": 2661, "2662": 2662, "2663": 2663, "2664": 2664, "2665": 2665, "2666": 2666, "2667": 2667, "2668": 2668, "2669": 2669,
		"2670": 2670, "2671": 2671, "2672": 2672, "2673": 2673, "2674": 2674, "2675": 2675, "2676": 2676, "2677": 2677, "2678": 2678, "2679": 2679,
		"2680": 2680, "2681": 2681, "2682": 2682, "2683": 2683, "2684": 2684, "2685": 2685, "2686": 2686, "2687": 2687, "2688": 2688, "2689": 2689,
		"2690": 2690, "2691": 2691, "2692": 2692, "2693": 2693, "2694": 2694, "2695": 2695, "2696": 2696, "2697": 2697, "2698": 2698, "2699": 2699,
		"2700": 2700, "2701": 2701, "2702": 2702, "2703": 2703, "2704": 2704, "2705": 2705, "2706": 2706, "2707": 2707, "2708": 2708, "2709": 2709,
		"2710": 2710, "2711": 2711, "2712": 2712, "2713": 2713, "2714": 2714, "2715": 2715, "2716": 2716, "2717": 2717, "2718": 2718, "2719": 2719,
		"2720": 2720, "2721": 2721, "2722": 2722, "2723": 2723, "2724": 2724, "2725": 2725, "2726": 2726, "2727": 2727, "2728": 2728, "2729": 2729,
		"2730": 2730, "2731": 2731, "2732": 2732, "2733": 2733, "2734": 2734, "2735": 2735, "2736": 2736, "2737": 2737, "2738": 2738, "2739": 2739,
		"2740": 2740, "2741": 2741, "2742": 2742, "2743": 2743, "2744": 2744, "2745": 2745, "2746": 2746, "2747": 2747, "2748": 2748, "2749": 2749,
		"2750": 2750, "2751": 2751, "2752": 2752, "2753": 2753, "2754": 2754, "2755": 2755, "2756": 2756, "2757": 2757, "2758": 2758, "2759": 2759,
		"2760": 2760, "2761": 2761, "2762": 2762, "2763": 2763, "2764": 2764, "2765": 2765, "2766": 2766, "2767": 2767, "2768": 2768, "2769": 2769,
		"2770": 2770, "2771": 2771, "2772": 2772, "2773": 2773, "2774": 2774, "2775": 2775, "2776": 2776, "2777": 2777, "2778": 2778, "2779": 2779,
		"2780": 2780, "2781": 2781, "2782": 2782, "2783": 2783, "2784": 2784, "2785": 2785, "2786": 2786, "2787": 2787, "2788": 2788, "2789": 2789,
		"2790": 2790, "2791": 2791, "2792": 2792, "2793": 2793, "2794": 2794, "2795": 2795, "2796": 2796, "2797": 2797, "2798": 2798, "2799": 2799,
		"2800": 2800, "2801": 2801, "2802": 2802, "2803": 2803, "2804": 2804, "2805": 2805, "2806": 2806, "2807": 2807, "2808": 2808, "2809": 2809,
		"2810": 2810, "2811": 2811, "2812": 2812, "2813": 2813, "2814": 2814, "2815": 2815, "2816": 2816, "2817": 2817, "2818": 2818, "2819": 2819,
		"2820": 2820, "2821": 2821, "2822": 2822, "2823": 2823, "2824": 2824, "2825": 2825, "2826": 2826, "2827": 2827, "2828": 2828, "2829": 2829,
		"2830": 2830, "2831": 2831, "2832": 2832, "2833": 2833, "2834": 2834, "2835": 2835, "2836": 2836, "2837": 2837, "2838": 2838, "2839": 2839,
		"2840": 2840, "2841": 2841, "2842": 2842, "2843": 2843, "2844": 2844, "2845": 2845, "2846": 2846, "2847": 2847, "2848": 2848, "2849": 2849,
		"2850": 2850, "2851": 2851, "2852": 2852, "2853": 2853, "2854": 2854, "2855": 2855, "2856": 2856, "2857": 2857, "2858": 2858, "2859": 2859,
		"2860": 2860, "2861": 2861, "2862": 2862, "2863": 2863, "2864": 2864, "2865": 2865, "2866": 2866, "2867": 2867, "2868": 2868, "2869": 2869,
		"2870": 2870, "2871": 2871, "2872": 2872, "2873": 2873, "2874": 2874, "2875": 2875, "2876": 2876, "2877": 2877, "2878": 2878, "2879": 2879,
		"2880": 2880, "2881": 2881, "2882": 2882, "2883": 2883, "2884": 2884, "2885": 2885, "2886": 2886, "2887": 2887, "2888": 2888, "2889": 2889,
		"2890": 2890, "2891": 2891, "2892": 2892, "2893": 2893, "2894": 2894, "2895": 2895, "2896": 2896, "2897": 2897, "2898": 2898, "2899": 2899,
		"2900": 2900, "2901": 2901, "2902": 2902, "2903": 2903, "2904": 2904, "2905": 2905, "2906": 2906, "2907": 2907, "2908": 2908, "2909": 2909,
		"2910": 2910, "2911": 2911, "2912": 2912, "2913": 2913, "2914": 2914, "2915": 2915, "2916": 2916, "2917": 2917, "2918": 2918, "2919": 2919,
		"2920": 2920, "2921": 2921, "2922": 2922, "2923": 2923, "2924": 2924, "2925": 2925, "2926": 2926, "2927": 2927, "2928": 2928, "2929": 2929,
		"2930": 2930, "2931": 2931, "2932": 2932, "2933": 2933, "2934": 2934, "2935": 2935, "2936": 2936, "2937": 2937, "2938": 2938, "2939": 2939,
		"2940": 2940, "2941": 2941, "2942": 2942, "2943": 2943, "2944": 2944, "2945": 2945, "2946": 2946, "2947": 2947, "2948": 2948, "2949": 2949,
		"2950": 2950, "2951": 2951, "2952": 2952, "2953": 2953, "2954": 2954, "2955": 2955, "2956": 2956, "2957": 2957, "2958": 2958, "2959": 2959,
		"2960": 2960, "2961": 2961, "2962": 2962, "2963": 2963, "2964": 2964, "2965": 2965, "2966": 2966, "2967": 2967, "2968": 2968, "2969": 2969,
		"2970": 2970, "2971": 2971, "2972": 2972, "2973": 2973, "2974": 2974, "2975": 2975, "2976": 2976, "2977": 2977, "2978": 2978, "2979": 2979,
		"2980": 2980, "2981": 2981, "2982": 2982, "2983": 2983, "2984": 2984, "2985": 2985, "2986": 2986, "2987": 2987, "2988": 2988, "2989": 2989,
		"2990": 2990, "2991": 2991, "2992": 2992, "2993": 2993, "2994": 2994, "2995": 2995, "2996": 2996, "2997": 2997, "2998": 2998, "2999": 2999,
	}
	monthTokens = map[string]int{
		`1`: 1, `jan`: 1, `january`: 1,
		`2`: 2, `feb`: 2, `february`: 2,
		`3`: 3, `mar`: 3, `march`: 3,
		`4`: 4, `apr`: 4, `april`: 4,
		`5`: 5, `may`: 5,
		`6`: 6, `jun`: 6, `june`: 6,
		`7`: 7, `jul`: 7, `july`: 7,
		`8`: 8, `aug`: 8, `august`: 8,
		`9`: 9, `sep`: 9, `september`: 9,
		`10`: 10, `oct`: 10, `october`: 10,
		`11`: 11, `nov`: 11, `november`: 11,
		`12`: 12, `dec`: 12, `december`: 12,
	}
	dowTokens = map[string]int{
		`0`: 0, `sun`: 0, `sunday`: 0,
		`1`: 1, `mon`: 1, `monday`: 1,
		`2`: 2, `tue`: 2, `tuesday`: 2,
		`3`: 3, `wed`: 3, `wednesday`: 3,
		`4`: 4, `thu`: 4, `thursday`: 4,
		`5`: 5, `fri`: 5, `friday`: 5,
		`6`: 6, `sat`: 6, `saturday`: 6,
		`7`: 0,
	}
)

/******************************************************************************/

func atoi(s string) int {
	return numberTokens[s]
}

type fieldDescriptor struct {
	name         string
	min, max     int
	defaultList  []int
	valuePattern string
	atoi         func(string) int
}

var (
	secondDescriptor = fieldDescriptor{
		name:         "second",
		min:          0,
		max:          59,
		defaultList:  genericDefaultList[0:60],
		valuePattern: `0?[0-9]|[1-5][0-9]`,
		atoi:         atoi,
	}
	minuteDescriptor = fieldDescriptor{
		name:         "minute",
		min:          0,
		max:          59,
		defaultList:  genericDefaultList[0:60],
		valuePattern: `0?[0-9]|[1-5][0-9]`,
		atoi:         atoi,
	}
	hourDescriptor = fieldDescriptor{
		name:         "hour",
		min:          0,
		max:          23,
		defaultList:  genericDefaultList[0:24],
		valuePattern: `0?[0-9]|1[0-9]|2[0-3]`,
		atoi:         atoi,
	}
	domDescriptor = fieldDescriptor{
		name:         "day-of-month",
		min:          1,
		max:          31,
		defaultList:  genericDefaultList[1:32],
		valuePattern: `0?[1-9]|[12][0-9]|3[01]`,
		atoi:         atoi,
	}
	monthDescriptor = fieldDescriptor{
		name:         "month",
		min:          1,
		max:          12,
		defaultList:  genericDefaultList[1:13],
		valuePattern: `0?[1-9]|1[012]|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|january|february|march|april|march|april|june|july|august|september|october|november|december`,
		atoi: func(s string) int {
			return monthTokens[s]
		},
	}
	dowDescriptor = fieldDescriptor{
		name:         "day-of-week",
		min:          0,
		max:          6,
		defaultList:  genericDefaultList[0:7],
		valuePattern: `0?[0-7]|sun|mon|tue|wed|thu|fri|sat|sunday|monday|tuesday|wednesday|thursday|friday|saturday`,
		atoi: func(s string) int {
			return dowTokens[s]
		},
	}
	yearDescriptor = fieldDescriptor{
		name:         "year",
		min:          1970,
		max:          2099,
		defaultList:  yearDefaultList[:],
		valuePattern: `19[789][0-9]|20[0-9]{2}`,
		atoi:         atoi,
	}
)

/******************************************************************************/

var (
	layoutWildcard            = `^\*$|^\?$`
	layoutValue               = `^(%value%)$`
	layoutRange               = `^(%value%)-(%value%)$`
	layoutWildcardAndInterval = `^\*/(\d+)$`
	layoutValueAndInterval    = `^(%value%)/(\d+)$`
	layoutRangeAndInterval    = `^(%value%)-(%value%)/(\d+)$`
	layoutLastDom             = `^l$`
	layoutWorkdom             = `^(%value%)w$`
	layoutLastWorkdom         = `^lw$`
	layoutDowOfLastWeek       = `^(%value%)l$`
	layoutDowOfSpecificWeek   = `^(%value%)#([1-5])$`
	fieldFinder               = regexp.MustCompile(`\S+`)
	entryFinder               = regexp.MustCompile(`[^,]+`)
	layoutRegexp              = make(map[string]*regexp.Regexp)
	layoutRegexpLock          sync.Mutex
)

/******************************************************************************/

var cronNormalizer = strings.NewReplacer(
	"@yearly", "0 0 0 1 1 * *",
	"@annually", "0 0 0 1 1 * *",
	"@monthly", "0 0 0 1 * * *",
	"@weekly", "0 0 0 * * 0 *",
	"@daily", "0 0 0 * * * *",
	"@hourly", "0 0 * * * * *")

/******************************************************************************/

func (expr *Expression) secondFieldHandler(s string) error {
	var err error
	expr.secondList, err = genericFieldHandler(s, secondDescriptor)
	return err
}

/******************************************************************************/

func (expr *Expression) minuteFieldHandler(s string) error {
	var err error
	expr.minuteList, err = genericFieldHandler(s, minuteDescriptor)
	return err
}

/******************************************************************************/

func (expr *Expression) hourFieldHandler(s string) error {
	var err error
	expr.hourList, err = genericFieldHandler(s, hourDescriptor)
	return err
}

/******************************************************************************/

func (expr *Expression) monthFieldHandler(s string) error {
	var err error
	expr.monthList, err = genericFieldHandler(s, monthDescriptor)
	return err
}

/******************************************************************************/

func (expr *Expression) yearFieldHandler(s string) error {
	var err error
	expr.yearList, err = genericFieldHandler(s, yearDescriptor)
	return err
}

/******************************************************************************/

const (
	none = 0
	one  = 1
	span = 2
	all  = 3
)

type cronDirective struct {
	kind  int
	first int
	last  int
	step  int
	sbeg  int
	send  int
}

func genericFieldHandler(s string, desc fieldDescriptor) ([]int, error) {
	directives, err := genericFieldParse(s, desc)
	if err != nil {
		return nil, err
	}
	values := make(map[int]bool)
	for _, directive := range directives {
		switch directive.kind {
		case none:
			return nil, fmt.Errorf("syntax error in %s field: '%s'", desc.name, s[directive.sbeg:directive.send])
		case one:
			populateOne(values, directive.first)
		case span:
			populateMany(values, directive.first, directive.last, directive.step)
		case all:
			return desc.defaultList, nil
		}
	}
	return toList(values), nil
}

func (expr *Expression) dowFieldHandler(s string) error {
	expr.daysOfWeekRestricted = true
	expr.daysOfWeek = make(map[int]bool)
	expr.lastWeekDaysOfWeek = make(map[int]bool)
	expr.specificWeekDaysOfWeek = make(map[int]bool)

	directives, err := genericFieldParse(s, dowDescriptor)
	if err != nil {
		return err
	}

	for _, directive := range directives {
		switch directive.kind {
		case none:
			sdirective := s[directive.sbeg:directive.send]
			snormal := strings.ToLower(sdirective)
			// `5L`
			pairs := makeLayoutRegexp(layoutDowOfLastWeek, dowDescriptor.valuePattern).FindStringSubmatchIndex(snormal)
			if len(pairs) > 0 {
				populateOne(expr.lastWeekDaysOfWeek, dowDescriptor.atoi(snormal[pairs[2]:pairs[3]]))
			} else {
				// `5#3`
				pairs := makeLayoutRegexp(layoutDowOfSpecificWeek, dowDescriptor.valuePattern).FindStringSubmatchIndex(snormal)
				if len(pairs) > 0 {
					populateOne(expr.specificWeekDaysOfWeek, (dowDescriptor.atoi(snormal[pairs[4]:pairs[5]])-1)*7+(dowDescriptor.atoi(snormal[pairs[2]:pairs[3]])%7))
				} else {
					return fmt.Errorf("syntax error in day-of-week field: '%s'", sdirective)
				}
			}
		case one:
			populateOne(expr.daysOfWeek, directive.first)
		case span:
			populateMany(expr.daysOfWeek, directive.first, directive.last, directive.step)
		case all:
			populateMany(expr.daysOfWeek, directive.first, directive.last, directive.step)
			expr.daysOfWeekRestricted = false
		}
	}
	return nil
}

func (expr *Expression) domFieldHandler(s string) error {
	expr.daysOfMonthRestricted = true
	expr.lastDayOfMonth = false
	expr.lastWorkdayOfMonth = false
	expr.daysOfMonth = make(map[int]bool)     // days of month map
	expr.workdaysOfMonth = make(map[int]bool) // work days of month map

	directives, err := genericFieldParse(s, domDescriptor)
	if err != nil {
		return err
	}

	for _, directive := range directives {
		switch directive.kind {
		case none:
			sdirective := s[directive.sbeg:directive.send]
			snormal := strings.ToLower(sdirective)
			// `L`
			if makeLayoutRegexp(layoutLastDom, domDescriptor.valuePattern).MatchString(snormal) {
				expr.lastDayOfMonth = true
			} else {
				// `LW`
				if makeLayoutRegexp(layoutLastWorkdom, domDescriptor.valuePattern).MatchString(snormal) {
					expr.lastWorkdayOfMonth = true
				} else {
					// `15W`
					pairs := makeLayoutRegexp(layoutWorkdom, domDescriptor.valuePattern).FindStringSubmatchIndex(snormal)
					if len(pairs) > 0 {
						populateOne(expr.workdaysOfMonth, domDescriptor.atoi(snormal[pairs[2]:pairs[3]]))
					} else {
						return fmt.Errorf("syntax error in day-of-month field: '%s'", sdirective)
					}
				}
			}
		case one:
			populateOne(expr.daysOfMonth, directive.first)
		case span:
			populateMany(expr.daysOfMonth, directive.first, directive.last, directive.step)
		case all:
			populateMany(expr.daysOfMonth, directive.first, directive.last, directive.step)
			expr.daysOfMonthRestricted = false
		}
	}
	return nil
}

/******************************************************************************/

func populateOne(values map[int]bool, v int) {
	values[v] = true
}

func populateMany(values map[int]bool, min, max, step int) {
	for i := min; i <= max; i += step {
		values[i] = true
	}
}

func toList(set map[int]bool) []int {
	list := make([]int, len(set))
	i := 0
	for k := range set {
		list[i] = k
		i += 1
	}
	sort.Ints(list)
	return list
}

/******************************************************************************/

func genericFieldParse(s string, desc fieldDescriptor) ([]*cronDirective, error) {
	// At least one entry must be present
	indices := entryFinder.FindAllStringIndex(s, -1)
	if len(indices) == 0 {
		return nil, fmt.Errorf("%s field: missing directive", desc.name)
	}

	directives := make([]*cronDirective, 0, len(indices))

	for i := range indices {
		directive := cronDirective{
			sbeg: indices[i][0],
			send: indices[i][1],
		}
		snormal := strings.ToLower(s[indices[i][0]:indices[i][1]])

		// `*`
		if makeLayoutRegexp(layoutWildcard, desc.valuePattern).MatchString(snormal) {
			directive.kind = all
			directive.first = desc.min
			directive.last = desc.max
			directive.step = 1
			directives = append(directives, &directive)
			continue
		}
		// `5`
		if makeLayoutRegexp(layoutValue, desc.valuePattern).MatchString(snormal) {
			directive.kind = one
			directive.first = desc.atoi(snormal)
			directives = append(directives, &directive)
			continue
		}
		// `5-20`
		pairs := makeLayoutRegexp(layoutRange, desc.valuePattern).FindStringSubmatchIndex(snormal)
		if len(pairs) > 0 {
			directive.kind = span
			directive.first = desc.atoi(snormal[pairs[2]:pairs[3]])
			directive.last = desc.atoi(snormal[pairs[4]:pairs[5]])
			directive.step = 1
			directives = append(directives, &directive)
			continue
		}
		// `*/2`
		pairs = makeLayoutRegexp(layoutWildcardAndInterval, desc.valuePattern).FindStringSubmatchIndex(snormal)
		if len(pairs) > 0 {
			directive.kind = span
			directive.first = desc.min
			directive.last = desc.max
			directive.step = atoi(snormal[pairs[2]:pairs[3]])
			if directive.step < 1 || directive.step > desc.max {
				return nil, fmt.Errorf("invalid interval %s", snormal)
			}
			directives = append(directives, &directive)
			continue
		}
		// `5/2`
		pairs = makeLayoutRegexp(layoutValueAndInterval, desc.valuePattern).FindStringSubmatchIndex(snormal)
		if len(pairs) > 0 {
			directive.kind = span
			directive.first = desc.atoi(snormal[pairs[2]:pairs[3]])
			directive.last = desc.max
			directive.step = atoi(snormal[pairs[4]:pairs[5]])
			if directive.step < 1 || directive.step > desc.max {
				return nil, fmt.Errorf("invalid interval %s", snormal)
			}
			directives = append(directives, &directive)
			continue
		}
		// `5-20/2`
		pairs = makeLayoutRegexp(layoutRangeAndInterval, desc.valuePattern).FindStringSubmatchIndex(snormal)
		if len(pairs) > 0 {
			directive.kind = span
			directive.first = desc.atoi(snormal[pairs[2]:pairs[3]])
			directive.last = desc.atoi(snormal[pairs[4]:pairs[5]])
			directive.step = atoi(snormal[pairs[6]:pairs[7]])
			if directive.step < 1 || directive.step > desc.max {
				return nil, fmt.Errorf("invalid interval %s", snormal)
			}
			directives = append(directives, &directive)
			continue
		}
		// No behavior for this one, let caller deal with it
		directive.kind = none
		directives = append(directives, &directive)
	}
	return directives, nil
}

/******************************************************************************/

func makeLayoutRegexp(layout, value string) *regexp.Regexp {
	layoutRegexpLock.Lock()
	defer layoutRegexpLock.Unlock()

	layout = strings.Replace(layout, `%value%`, value, -1)
	re := layoutRegexp[layout]
	if re == nil {
		re = regexp.MustCompile(layout)
		layoutRegexp[layout] = re
	}
	return re
}
